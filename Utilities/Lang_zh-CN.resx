<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="argument_author" xml:space="preserve">
    <value>词典的作者</value>
  </data>
  <data name="argument_build" xml:space="preserve">
    <value>从指定文件生成词典</value>
  </data>
  <data name="argument_check" xml:space="preserve">
    <value>检查指定文件是否是合法的词典</value>
  </data>
  <data name="argument_dotnet" xml:space="preserve">
    <value>处理 .NET 程序使用的词典</value>
  </data>
  <data name="argument_english" xml:space="preserve">
    <value>English interface</value>
  </data>
  <data name="argument_export" xml:space="preserve">
    <value>导出词典中的所有词汇</value>
  </data>
  <data name="argument_files" xml:space="preserve">
    <value>词汇文件列表，或词典文件</value>
  </data>
  <data name="argument_format" xml:space="preserve">
    <value>词典格式 (bin, php, dotnet)</value>
  </data>
  <data name="argument_gbk" xml:space="preserve">
    <value>使用 GBK 字符集</value>
  </data>
  <data name="argument_help" xml:space="preserve">
    <value>显示此帮助信息</value>
  </data>
  <data name="argument_info" xml:space="preserve">
    <value>显示指定词典的元信息</value>
  </data>
  <data name="argument_output" xml:space="preserve">
    <value>指定输出文件文件名</value>
  </data>
  <data name="argument_title" xml:space="preserve">
    <value>词典的标题</value>
  </data>
  <data name="argument_upgrade" xml:space="preserve">
    <value>升级词典到版本二</value>
  </data>
  <data name="completed" xml:space="preserve">
    <value>完成。</value>
  </data>
  <data name="copyright" xml:space="preserve">
    <value>(C) 版权所有 2007 Wudi Studio</value>
  </data>
  <data name="deserializing_x" xml:space="preserve">
    <value>正在反序列化 {0} ... </value>
  </data>
  <data name="help_commands" xml:space="preserve">
    <value>命令:</value>
  </data>
  <data name="help_options" xml:space="preserve">
    <value>选项:</value>
  </data>
  <data name="help_params" xml:space="preserve">
    <value>参数:</value>
  </data>
  <data name="help_usage" xml:space="preserve">
    <value>用法:</value>
  </data>
  <data name="indexes_wrote" xml:space="preserve">
    <value>已完成，写入了 {0:#,#} 项。</value>
  </data>
  <data name="nodes_processed" xml:space="preserve">
    <value>已完成，处理了 {0:#,#} 个节点。</value>
  </data>
  <data name="press_any_key_to_exit" xml:space="preserve">
    <value>按任意键继续...</value>
  </data>
  <data name="reading_from_v1" xml:space="preserve">
    <value>正在读取版本一词典 ...</value>
  </data>
  <data name="reading_from_v2" xml:space="preserve">
    <value>直接读取版本二词典 ... </value>
  </data>
  <data name="reading_words" xml:space="preserve">
    <value>正在读取词汇 ... </value>
  </data>
  <data name="reading_x" xml:space="preserve">
    <value>正在读取 {0} ... </value>
  </data>
  <data name="serializing_lexicon" xml:space="preserve">
    <value>正在序列化词典 ... </value>
  </data>
  <data name="serializing_to_x" xml:space="preserve">
    <value>正在序列化到 {0} ... </value>
  </data>
  <data name="sorting_words" xml:space="preserve">
    <value>正在排序词汇 ... </value>
  </data>
  <data name="step_building_arrays" xml:space="preserve">
    <value>生成数组</value>
  </data>
  <data name="step_building_dicts" xml:space="preserve">
    <value>处理节点</value>
  </data>
  <data name="step_building_lexicon" xml:space="preserve">
    <value>生成词典</value>
  </data>
  <data name="step_building_tree" xml:space="preserve">
    <value>生成 TRIE 树</value>
  </data>
  <data name="step_converting_lexicon" xml:space="preserve">
    <value>转换词典</value>
  </data>
  <data name="step_format" xml:space="preserve">
    <value>[第 {0}/{1} 步] {2}</value>
  </data>
  <data name="step_format_file" xml:space="preserve">
    <value>[{0}/{1}] {2} ... </value>
  </data>
  <data name="step_reading_files" xml:space="preserve">
    <value>读取文件</value>
  </data>
  <data name="step_reading_lexicon" xml:space="preserve">
    <value>读取词典</value>
  </data>
  <data name="step_reading_words" xml:space="preserve">
    <value>读取词汇</value>
  </data>
  <data name="step_writing_lexicon" xml:space="preserve">
    <value>写入词典</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>Wudi's Lexicon Utilities</value>
  </data>
  <data name="unserializing_x" xml:space="preserve">
    <value>正在反序列化 {0} ... </value>
  </data>
  <data name="usage_command" xml:space="preserve">
    <value>命令</value>
  </data>
  <data name="usage_options" xml:space="preserve">
    <value>选项</value>
  </data>
  <data name="words_added" xml:space="preserve">
    <value>已完成，添加了 {0:#,#} 个词汇。</value>
  </data>
  <data name="words_read" xml:space="preserve">
    <value>{0:#,#} 个词汇已读取。</value>
  </data>
  <data name="writing_lexicon" xml:space="preserve">
    <value>正在写入词典 ... </value>
  </data>
  <data name="writing_words" xml:space="preserve">
    <value>正在写入词汇 ... </value>
  </data>
</root>